
const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://admin:<password>@cluster0.uxiwyez.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);



NODE_ENV = development
PORT = 3000
CONN_STR = mongodb+srv://admin:<MU5zYVBYg3NobCKm>@cluster0.uxiwyez.mongodb.net/cineflix
LOCAL_CONN_STRING = mongodb://localhost:27017/cineflix
DB_USER = admin
DB_PASSWORD = MU5zYVBYg3NobCKm



*************************************************************
database connection*****************************************

const uri = 'mongodb+srv://admin:MU5zYVBYg3NobCKm@cluster0.uxiwyez.mongodb.net/'; // MongoDB connection URI
// const client = new MongoClient(uri);

// async function main() {
//     try {
//         await client.connect(); // Connect to MongoDB
//         console.log(conn)
//         console.log('Connected to MongoDB');
//     } catch (error) {
//         console.error('Error connecting to MongoDB:', error);
//     } finally {
//         await client.close(); // Close the MongoDB connection
//     }
// }

// main();



********************************************************************
CRUD in json files.
[

  let movies = JSON.parse(fs.readFileSync('./data/movies.json'))
exports.checkId = (req, res, next, value) => {
    console.log('Movie ID is: ' + value)

    let movie = movies.find(el => el.id == value)

    if(!movie){
        return res.status(404).json({
            status: "Failed",
            message: "Movie with id " + value + " not found!"
        }) 
    }
    next()
}
//While adding movie in the movies.json
//checks  whether a movie object has name and duration field or not
exports.validateBody = (req,res, next) => {
    if(!req.body.name || !req.body.duration){
        return res.status(400).json({
            status: "failed",
            message: "Please include a name and duration."
        })
    }
    next()
}

//checks id with the existing id of the movies within the json file
exports.checkId = (req, res, next, value) => {
    console.log('Movie ID is: ' + value)

    let movie = movies.find(el => el.id == value)

    if(!movie){
        return res.status(404).json({
            status: "Failed",
            message: "Movie with id " + value + " not found!"
        }) 
    }
    next()
}
//While adding movie in the movies.json
//checks  whether a movie object has name and duration field or not
exports.validateBody = (req,res, next) => {
    if(!req.body.name || !req.body.duration){
        return res.status(400).json({
            status: "failed",
            message: "Please include a name and duration."
        })
    }
    next()
}

exports.getAllMovies =(req, res) => {
    res.status(200).json({
       status: "success",
       requestedAt: req.requestedAt,
       count: movies.length, 
       message:"Movies retrieved successfully!",
       data: {
           movies: movies
       }
   })
}

exports.getMovie =(req, res) => {
   
   const id = req.params.id * 1;
   let movie = movies.find(el => el.id == id)

//    if(!movie){
//        return res.status(404).json({
//            status: "Failed",
//            message: "Movie with id '+id+' not found!"
//        }) 
//    }
   res.status(200).json({
       status: "success",
       movie: movie
   })
}

exports.updateMovie = (req, res) => {

   const id = parseInt(req.params.id); // Convert id to integer

   const movieToUpdate = movies.find(movie => movie.id === id);
   if(!movieToUpdate){
       return res.status(404).json({
           message: 'No movie with the given ID was found.'
       })
   }

   Object.assign(movieToUpdate, req.body);

   const index = movies.indexOf(movieToUpdate)
   movies[index] = movieToUpdate;

   fs.writeFile('./data/movies.json', JSON.stringify(movies, null, 2), err => {
       if(err){
           return res.status(500).json({
               status: 'failed',
               message: "modification of movie id ${id} failed"
           })
       }

       res.status(200).json({
           status: "Success",
           message: "Movie updated successfully",
           data: {
               movie: movieToUpdate
           }
       });
   });
}

exports.addMovie = (req, res) => { 
   let newId = movies[movies.length - 1].id + 1;
   let newMovie = Object.assign({id: newId}, req.body)
   movies.push(newMovie);
   console.log(req.body)

   fs.writeFile('./data/movies.json', JSON.stringify(movies), (err) =>{
       res.status(201).json({
           status: "success",
           data: {
               movie: newMovie
           }
       })
   })
}

exports.deleteMovie = (req,res)=>{
   const id = req.params.id;
   const movieToDelete = movies.find(movie => movie.id === id)
 
   const index = movies.indexOf(movieToDelete)

   movies.splice(index-1, 1);

   fs.writeFile('./data/movies.json', JSON.stringify(movies), err => {
       if(err){
           return res.status(500).json({
               status: 'failed',
               message: "modification of movie id ${id} failed"
           })
       }

       res.status(204).json({
           status: "Success",
           message: "Movie Deleted successfully",
           data: {
               movie: null
           }
       });
   });  
}

]
